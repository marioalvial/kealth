plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
    id 'org.jetbrains.dokka' version '0.9.18'
    id 'maven-publish'
    id 'org.jmailen.kotlinter' version '1.25.1'
    id 'signing'
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }
}

subprojects {
    apply {
        plugin("kotlin")
        plugin("signing")
        plugin("maven-publish")
        plugin("org.jetbrains.dokka")
        plugin("org.jmailen.kotlinter")
    }
    ext {
        sonatype_username = System.getenv('SONATYPE_USERNAME') ?: ""
        sonatype_password = System.getenv('SONATYPE_PASSWORD') ?: ""
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    test {
        testLogging.showStandardStreams = true
    }
    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }
    task('sourceJar', type: Jar) {
        classifier 'sources'
        from sourceSets.main.getAllSource()
    }
    task('javadocJar', type: Jar) {
        classifier 'javadoc'
        description 'Assembles Kotlin docs with Dokka'
        group JavaBasePlugin.DOCUMENTATION_GROUP
        from(tasks.dokka)
    }
    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }
    signing {
        sign configurations.archives
    }

    tasks.withType(Sign) {
        onlyIf { gradle.taskGraph.hasTask(":${project.name}:publish") }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java

                artifact(sourceJar) {
                    classifier = 'sources'
                }
                artifact(javadocJar) {
                    classifier = 'javadoc'
                }

                pom.withXml {
                    def pomFile = file("$buildDir/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }

                pom {
                    name = 'kealth'
                    description = 'Health check for external dependencies in Kotlin'
                    url = 'https://github.com/marioalvial/kealth'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://github.com/marioalvial/kealth/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'marioalvial'
                            name = 'MÃ¡rio Alvial'
                            email = 'mse.alvial@gmail.com'
                        }
                    }
                    scm {
                        url = 'https://github.com/marioalvial/kealth'
                        connection = 'scm:git:git://github.com/marioalvial/kealth.git'
                        developerConnection = 'scm:git:ssh:git@github.com:marioalvial/kealth.git'
                    }
                }

                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }

                }
            }
        }
        repositories {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username sonatype_username
                    password sonatype_password
                }
            }
        }
    }
    model {
        tasks.generatePomFileForMavenPublication {
            destination = file("$buildDir/generated-pom.xml")
        }
        tasks.publishMavenPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishMavenPublicationToMavenRepository {
            dependsOn project.tasks.signArchives
        }
    }
    kotlinter {
        ignoreFailures = true
        indentSize = 4
        continuationIndentSize = 4
        reporters = ['checkstyle', 'plain']
        experimentalRules = false
        fileBatchSize = 30
    }
}
